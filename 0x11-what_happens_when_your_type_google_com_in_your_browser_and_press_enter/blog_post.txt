Web browsing mechanism simplified

You are reading this post on an online platform, so you must have visited a web page at least once, most probably many many more than just once, and you may have wondered “WHAT happens when I TYPE <google.com> in the browser’s ADDRESS BAR and press ENTER?”.

The answer to that question is both extremely simple and very complicated at the same time. It is SIMPLE because it only consists of multiple mini simple steps. And COMPLICATED because of that “multiple” part; as the process is a journey between various stops, that journey is bi-directional and some parts of this journey might need to be travelled again many times depending on different parameters, till Google web page finally manifests in your browser just few milliseconds after you pressed the ENTER button in your keyboard.

So, let’s embark on this journey together, GET READY. Once the ENTER button returns to its un-pushed position, the browser will try to auto complete what you’ve typed in the address bar to have a valid URL which is the full address of the content you are requesting in the valleys of the internet world; just like your home address which starts with your building number going through the street, city, … till it ends with country your home is located in, or maybe it ends with the planet earth if that address will be used by an alien trying to send you a postal mail :D Back to our track, basically the URLs is just like home addresses but for locations on the internet. So, if you are using a modern web browser the auto-completed URL most probably will be translated from “google.com” to “https://www.google.com/”.

Even though the browser completed the URL for you, it still doesn’t know how to reach that location and get what you’ve requested, that is because web contents are located on web servers which are identified by some sort of numerical addresses resemble telephone numbers, called IP addresses. Now the browser needs to figure out the IP address of “www.google.com”. Fortunately, this can be retrieved, just as we retrieve phone numbers from phone book. And a sub-journey of “I know a guy who knows a guy who knows …” begins, only instead of guys who know guys, there is a DNS who knows a DNS who knows … So, what is DNS? DNS (Domain Name Server) is a server (servers are just a special type of computers), whose main purpose is to translate domain names like “www.google.com” into IP addresses, or refer to the DNS who can help accomplishing that job. So, the browser keeps asking DNSs and the referred DNSs till it get the answer it was looking for which is the IP address of “www.google.com”.

Now the browser got the IP address which look like “123.45.67.11”, thanks to the DNS. Now, let’s have a rest in our journey, to take a brief dive into the realm of internet protocols. An INTERNET PROTOCOL is a set of published rules and procedures that exist to standardize the communication between various systems and platforms regardless of their differences and their different underlying infrastructure. “https” at the beginning of the URL is one of the popular protocols, and it defines the form and shape of the request that the browser will generate to get the content you asked for, and also how the web server on the other end of our journey should respond to the requests it receives. But before the browser can send the https request, it will initiate a connection to the server (which is a just a normal computer, probably with better features) which has the content we are seeking. Here comes the role of another internet protocol which is TCP/IP which will be used to initiate and control this connection to the remote server whose IP was retrieved earlier.

To initiate a connection to the remote server we need something called port number beside the IP number; if we considered the IP as an apartments complex building, the port number will be an apartment door number in that building. But will not search for our port number; as it should be provided in the URL, but in our case it’s not explicitly provided, so the browser will look for the default port hiddenly implied in the “https://” part of the URL which is 443 and the URL will be internally “https://www.google.com:443/” and the exact location of the web server it needs to connect to identified as <IP:PORT> will be “123.45.67.11:443” . Now the browser will try to initiate a connection to the web server to request the website you asked for. Note that web server is just an application resides on a physical server somewhere on the internet. That physical server most probably has a firewall which can be hardware or a software that acts as a shield to protect the server from malicious attacks or unauthorized access, this firewall can control which type of connections are allowed, check if an the inbound connection is from a blacklisted IP and block it and also it’s configured to make only specific ports available for internet connections and some other ports open for local network connections or some specific computers that are white-listed.

In fact, HTTPS protocol is just the HTTP but with secure end-to-end communication, HTTP (Hyper Text Transfer Protocol) is basically a protocol setting the standards and rules for hypertext data (like HTML files) but it’s not restricted to only HTML files and used for many sorts of data transferred across the web and also for another types of communications like communications between applications using APIs (Application Programming Interfaces) and the ‘s’ in “HTTPS” is for “Secure”. In HTTPS connections, the data transmission is encrypted and only the two ends of the connection can decrypt this data, so any one in the middle even if they succeeded to see the data in transmission, they will not have any clue about what is being transmitted and will see only random gibberish characters that will not be of any use for them. This end-to-end encryption for example makes sending your credit cards data and passwords safe. All this added security will be useful only if the communication happens with the intended target which in this case, the web server of “google.com”, but what if someone or some malicious system pretended to be “google.com”, then you would be communicating securely but with the very wrong target and that security would mean nothing. Here comes the role of the SSL (Secure Socket Layer) certificate which contains the public key which is a crucial requirement for the end-to-end encryption itself and contains information specific to the website’s identity, name of the entity that the certificate was issued to, date of issuance, domain name, sub-domains included, etc.… You may think, great now we have a certificate that identify the web site and make us sure that we reached the right destination, but Mr. author didn’t you notice that there is still a possibility that some fake malicious system forges this certificate to just look like it’s our legitimate target? And I really like your way of thinking, you’ll be probably a great security engineer, as an answer to your legitimate question some pioneers decided that the certificate includes the issuing Certificate Authority (CA) and its Digital Signature so the browser can verify the authenticity of the SSL certificate with that CA independently and decides if it’s safe to complete connection initiation or not.

If the connection to “google.com” web server succeeded using the TCP protocol (Transmission Control Protocol), the browser will send will send a request that conforms to the HTTPS standards to the web server and the web server responds to that request also in a standardized way according to the rules of the HTTPS. The web server will most probably send an HTML file to the browser; HTML (Hypertext markup language) is a language used to convey the contents of web pages and their structure and hierarchy. Often times that HTML files contains links to other files which may be parts of the web page or for its styles or functionality (Images, Videos, CSS, JS, …), so the browser sends requests to get those files and if everything went well the web server will send the requested data and files.

This single web server, that serves simple files exists but usually only found in very limited use cases and small-scale simple websites. But it’s not the case with Google, as single server approach definitely will not be able handle the workloads a website like “google.com” will have to deal with. So, there’s many web servers working on multiple physical servers working on receiving requests and sending responses. But in need to organize the distribution of connections, requests and transmissions among those many servers, some special type of servers comes to the rescue, Ladies and Gentlemen let me introduce the Load Balancer whose role is to direct the ongoing connections between the servers. Load balancing can be done in many ways, connections can be distributed among the servers evenly, one after the other, till reaching the last one and then start over from the first one. Another way is redirecting a percentage of requests specific to each server, this is very useful when the amounts of workloads the servers can handle differ between the different serves. Also, there are some other different types of load balancing that you can discover about if you are interested.

Already said, web servers are great for serving files and static content, but in order to deal with dynamic content which is content that is not fixed and may change every time you request a web page, in Google for example if you are searching for something and few hours later you refreshed the search page, most probably you will get a page containing updated search results and different content. To realize that we need some software or a code library that take the client’s input data from the web server, process it and then send the output back to web server to serve it to the client. That software or code library is called Application Server. In order for the application server to be able to process the input data and generate the output content, it’ll most probably need to access some data, tables, organized files, … etc., the best way to facilitate storing, organizing and retrieving data is databases, there are different types of data bases, the most popular one is relational databases. The databases also exist in server-client relation form and are called Database Servers. So, the web server receives your HTTP request, forward it to the application server, which do some processing on data, queries the database server, stores and manipulated data in it, the application then return the generated content after finishing all the processing to the web server which send the appropriate response to you. Each of Web Server, Application Server or Database Server can exist on separate standalone physical servers (or cluster of servers) and can be installed on the same physical server (can be found in small-scale, light web application).

The browser will then construct the web page using the data and files it has received, so you finally be able to see the web page you’ve requested. This journey may look like a very long journey but it takes only less than a second or a few seconds at most. Thanks for joining me in this journey. Enjoy web surfing.